def is_unique_mst(n, m, edges, given_mst):
    def kruskal(n, edges, skip_edge=None):
        parent = list(range(n))
        rank = [0] * n

        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]

        def union(x, y):
            root_x = find(x)
            root_y = find(y)
            if root_x != root_y:
                if rank[root_x] > rank[root_y]:
                    parent[root_y] = root_x
                else:
                    parent[root_x] = root_y
                    if rank[root_x] == rank[root_y]:
                        rank[root_y] += 1

        edges.sort(key=lambda x: x[2])
        mst = []
        total_weight = 0

        for edge in edges:
            if edge != skip_edge:
                u, v, weight = edge
                if find(u) != find(v):
                    union(u, v)
                    mst.append(edge)
                    total_weight += weight

        return mst, total_weight

    mst, _ = kruskal(n, edges)
    given_mst_set = set(tuple(edge) for edge in given_mst)
    unique = len(given_mst) == len(mst) and given_mst_set == set(tuple(edge) for edge in mst)

    if unique:
        return f"Is the given MST unique? {unique}"
    else:
        _, weight = kruskal(n, edges, skip_edge=given_mst[0])
        return f"Is the given MST unique? {unique}\nAnother possible MST: {mst}\nTotal weight of MST: {weight}"

# Test Case 1
n = 4
m = 5
edges = [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)]
given_mst = [(2, 3, 4), (0, 3, 5), (0, 1, 10)]
print(is_unique_mst(n, m, edges, given_mst))

# Test Case 2
n = 5
m = 6
edges = [(0, 1, 1), (0, 2, 1), (1, 3, 2), (2, 3, 2), (3, 4, 3), (4, 2, 3)]
given_mst = [(0, 1, 1), (0, 2, 1), (1, 3, 2), (3, 4, 3)]
print(is_unique_mst(n, m, edges, given_mst))
