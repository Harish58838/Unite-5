from typing import List

def minimumTimeRequired(jobs: List[int], k: int) -> int:
    def is_possible(workloads, idx, jobs, limit):
        if idx >= len(jobs):
            return True
        cur_job = jobs[idx]
        for i in range(len(workloads)):
            if workloads[i] + cur_job <= limit:
                workloads[i] += cur_job
                if is_possible(workloads, idx + 1, jobs, limit):
                    return True
                workloads[i] -= cur_job
                if workloads[i] == 0 or workloads[i] + cur_job == limit:
                    break
        return False

    jobs.sort(reverse=True)
    left, right = max(jobs), sum(jobs)
    while left < right:
        mid = left + (right - left) // 2
        workloads = [0] * k
        if is_possible(workloads, 0, jobs, mid):
            right = mid
        else:
            left = mid + 1
    return left

# Example 1
jobs1 = [3, 2, 3]
k1 = 3
print(minimumTimeRequired(jobs1, k1))  # Output: 3

# Example 2
jobs2 = [1, 2, 4, 7, 8]
k2 = 2
print(minimumTimeRequired(jobs2, k2))  # Output: 11
