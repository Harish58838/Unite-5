import heapq

def dijkstra(graph, source, target):
    pq = [(0, source)]
    dist = {node: float('inf') for node in graph}
    dist[source] = 0
    
    while pq:
        cost, current = heapq.heappop(pq)
        if current == target:
            return dist[target]
        
        if cost > dist[current]:
            continue
        
        for neighbor, weight in graph[current]:
            new_cost = cost + weight
            if new_cost < dist[neighbor]:
                dist[neighbor] = new_cost
                heapq.heappush(pq, (new_cost, neighbor))
    
    return float('inf')

# Test Case 1
n = 6
edges = [(0, 1, 7), (0, 2, 9), (0, 5, 14), (1, 2, 10), (1, 3, 15), 
         (2, 3, 11), (2, 5, 2), (3, 4, 6), (4, 5, 9)]
source = 0
target = 4
print(dijkstra({i: [(j, w) for j, w in edges if j == i] for i in range(n)}, source, target))

# Test Case 2
n = 5
edges = [(0, 1, 10), (0, 4, 3), (1, 2, 2), (1, 4, 4), (2, 3, 9), (3, 2, 7), (4, 1, 1), (4, 2, 8), (4, 3, 2)]
source = 0
target = 3
print(dijkstra({i: [(j, w) for j, w in edges if j == i] for i in range(n)}, source, target))
